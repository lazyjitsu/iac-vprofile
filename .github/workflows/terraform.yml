name: "Vprovile IAC"
on:
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: us-east-1
  EKS_CLUSTER: vprofile-eks

jobs:
  terraform:
    name: "Apply the terraform code changes"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        # commented out so it will use the latest version of Terraform IMU
      #   with:
      #     terraform_version: 1.6.3
      #
      - name: Terraform init
        id: my-init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
        # we don't need to format but good to do
      - name: Terraform format
        id: fmt
        # if its not correct, fmt will return a non-zero and fail the workflow
        run: terraform fmt -check
      - name: Terraform validate
        id: validate
        # if non-zero, will fail
        run: terraform validate
      - name: Terraform plan
        id: plan
        # save some GPU w/no-color since its running in the background and won't need
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        # kill container IMU
        run: exit 1
      - name: Terraform Apply
        id: apple
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        # --auto-approve to avoid the yes/no prompt. planfile comes from the above output
        run: terraform apply --auto-approve --input=false --parallelism=1 planfile
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Get Kube config file
        id: getconfig
        if: steps.apple.outcome == 'success'
        #  In order to execute kubectl, we need the kubeconfig file!!! The below command gets us that. It creates the kubconfig file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}
      - name: Install Ingress controller
        if: steps.apple.outcome == 'success' && steps.getconfig.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1-1.3/deploy/static/provider/aws/deploy.yaml
